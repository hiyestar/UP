[root@svr7 ~]# x=120;read x;
阿s
[root@svr7 ~]# echo $x;
阿s
[root@svr7 shell]# echo 123400 > red.txt
[root@svr7 shell]# read x < red.txt;
[root@svr7 shell]# echo $x
123400

[root@svr7 shell]# export yy=250;echo $yy;
250
[root@svr7 shell]# bash; echo $yy;
[root@svr7 shell]# bash
[root@svr7 shell]# echo $yy
250

4) -z 检查变量的值是否未设置（空值）
  #-z 检查 变量的 值 是否 为 空值
[root@svr5 ~]# var1="nb" ; var2=""
[root@svr5 ~]# [ -z "$var1" ] && echo "空值" || echo "非空值"
非空值
[root@svr5 ~]# [ -z $var2 ] && echo "空值" || echo "非空值"
空值                                      //变量var2已设置，但无任何值，视为空
[root@svr5 ~]# [ ! -z $var1 ]                //测试var1是否为非空
还有一个-n可以测试变量是否不为空（相当于! -z）。

[root@svr7 shell]# var1='nb';var2='';
[root@svr7 shell]# [ -z '$var1' ] && echo 'null' || echo $var1;
nb
[root@svr7 shell]# [ -z '$var2' ] && echo 'null' || echo $var2;

[root@svr7 shell]# [ -z $var2 ] && echo 'is null';
is null
[root@svr7 shell]# [ ! -z $var1 ] && echo 'is full'$var1;
is fullnb

[root@svr7 shell]# [ -n $var1 ] && echo -e "is full\t"$var1;
is full	nb
[root@svr7 shell]# [ ! -z $var1 ] && echo -e "is full\t"$var1;
is full	nb

[root@svr7 shell]# [ ! -z $var1 ] && echo -e 'is full\t'$var1;
is full	nb






[root@pc207 shell]# cat /etc/shells 
/bin/sh
/bin/bash
/sbin/nologin
/usr/bin/sh
/usr/bin/bash
/usr/sbin/nologin
/bin/tcsh
/bin/csh

[root@pc207 ~]# mkdir /shell
[root@pc207 ~]# cd /shell
[root@pc207 shell]# vim continue.sh
[root@pc207 shell]# sh continue.sh
1
2
4
OK
[root@pc207 shell]# cat continue.sh
#!/bin/bash
for i in {1..4};
do 
  [ $i -eq 3 ] && continue;
  echo $i;
done
echo OK;

[root@pc207 shell]# vim continue.sh
[root@pc207 shell]# sh continue.sh
1
2
OK
[root@pc207 shell]# cat continue.sh
#!/bin/bash
for i in {1..4};
do 
  [ $i -eq 3 ] && break;
  echo $i;
done
echo OK;

[root@pc207 shell]# vim continue.sh
[root@pc207 shell]# sh continue.sh
1
2
[root@pc207 shell]# cat continue.sh
#!/bin/bash
for i in {1..4};
do 
  [ $i -eq 3 ] &&  exit;
  echo $i;
done
echo OK;

1）方法一，使用 ${}表达式
格式：${变量名:起始位置:长度}
[root@pc207 shell]# phone=13530503630;echo $phone;
13530503630
[root@pc207 shell]# echo ${#phone};
11
使用${}截取时，起始位置可以省略，省略时从第一个字符开始截。
比如，以下操作都可以从左侧开始截取前4个字符：
[root@pc207 shell]# echo -e ${phone:0:3}'\t'${phone::4};
135	1353

格式：expr substr "$变量名" 起始位置 长度
[root@pc207 shell]# echo -ne ${phone:1:3}'\t';expr substr $phone 2  3;
353	353

echo $变量名 | cut -b 起始位置-结束位置
选项 -b 表示按字节截取字符，其中起始位置、结束位置都可以省略。
当省略起始位置时，视为从第1个字符开始（编号也是从1开始，与expr类似），
当省略结束位置时，视为截取到最后
[root@pc207 shell]# echo $phone | cut -b 3-5;
530
[root@pc207 shell]# echo $phone | cut -b 3-11;
530503630
截取不连续的字符，比如第3、5、7个字符
[root@pc207 shell]# echo $phone | cut -b 3,5,7,9,11;
50060
[root@pc207 shell]# echo $phone | cut -b 3-
530503630

[root@svr7 abc]# phe=13530508910;echo $phe | cut -b 1-8;
13530508
[root@svr7 abc]# x=`echo $phe | cut -b 1-8`;echo $x;
13530508
root@svr7 abc]# x=$(echo $phe | cut -b 1-7);echo $x;
1353050


[root@svr7 abc]# phe=abcd5678ABCD;yy='';tmp=${phe:0:6};yy=$yy$tmp;echo $yy;
abcd56
[root@svr7 abc]# phe=abcd5678ABCD;yy='';tmp=${phe:1:6};yy=$yy$tmp;echo $yy;
bcd567
[root@svr7 abc]# phe=abcd5678ABCD;yy='';tmp=${phe:2:6};yy=$yy$tmp;echo $yy;
cd5678
[root@svr7 abc]# phe=abcd5678ABCD;yy='';tmp=${phe:0:2};yy=$yy$tmp;echo $yy;
ab
[root@svr7 abc]# expr substr $phe 2  3;
bcd
[root@svr7 abc]# expr substr $phe 2  4;
bcd5
[root@svr7 abc]# expr substr $phe 0  4;

[root@svr7 abc]# expr substr $phe 1  4;
abcd



[root@svr7 shell]# cat zifu.sh
#!/bin/bash
x='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
#62(0-61)  (1-62)
i=0;a=8;pass='';
while [ $i -lt $a ];
do
  num=$[RANDOM%62+1];
  sum2=$(echo $x | cut -b $num);
  sum=$sum$sum2;
  let i++;
  if [ $i -eq 8 ];then
     echo -e 'end\t'$i;
     echo $sum;
  fi
done
echo forfor=============;
for i in {1..8}
do
  num=$[RANDOM%62];
  tmp=${x:num:1};pass=$pass$tmp; 
done
echo  -e 'pass\t'$pass;


[root@pc207 shell]# p='';a=r;p=$p$a;echo $p;
r
[root@pc207 shell]# a=8;p=$p$a;echo $p
r8



只替换第1个子串
格式：${变量名/old/new}
[root@svr7 abc]#  echo $phe;
abcd5678ABCD
[root@svr7 abc]# echo ${phe/8/x};
abcd567xABCD

[root@svr7 abc]# echo ${phe/4/Y};
abcd5678ABCD
[root@svr7 abc]# echo ${phe/d/Y};
abcY5678ABCD

[root@svr7 abc]# echo $phe;
abcd5678ABCD
[root@svr7 abc]# echo ${nb:-123};echo ${phe:-123}
123
abcd5678ABCD

[root@svr7 abc]# echo ${nb-123};echo ${phe -123}|#注意空格 冒号：
123
bash: ${phe -123}: 坏的替换
[root@svr7 abc]# echo ${nb-123};echo ${phe-123}
123
abcd5678ABCD

替换全部子串
格式：${变量名//old/new}
[root@svr7 abc]# phe=abcabcabc;echo ${phe//a/X};
XbcXbcXbc
[root@svr7 abc]# echo ${phe//bc/yyy};
ayyyayyyayyy

1）从左向右，最短匹配删除
格式：${变量名#*关键词}
删除从 左侧第1个 字符到 最近的关键词“：”的部分，* 作通配符理解：
[root@svr7 abc]# A=`head -1 /etc/passwd`;echo $A;
root:x:0:0:root:/root:/bin/bash

[root@svr7 abc]# echo ${A#*:} #（一个#）
x:0:0:root:/root:/bin/bash

2）从左向右，最长匹配删除
格式：${变量名##*关键词}
删除 从左侧第1个字符 到 最远的 关键词“:”的部分：
[root@svr7 abc]# echo $A 
root:x:0:0:root:/root:/bin/bash
[root@svr7 abc]#  echo ${A##*:}  ##『二个#注意』
/bin/bash
3）从右向左，最短匹配删除
格式：${变量名%关键词*}
删除从右侧最后1个字符到往左最近的关键词“:”的部分，* 做通配符理解：
[root@svr7 abc]# echo $A 
root:x:0:0:root:/root:/bin/bash
[root@svr7 abc]# echo ${A%:*}
root:x:0:0:root:/root
[root@svr7 shell]# Ab='rw-r--r--. 1 root root 380 8月  14 11:35 zi';echo $Ab;
rw-r--r--. 1 root root 380 8月 14 11:35 zi
[root@svr7 shell]# echo ${Ab%t*}
rw-r--r--. 1 root roo


4）从 右 向 左，最 长 匹配删除
格式：${变量名%%关键词*}
删除从 右侧 最后 1个字符 到往 左 最远 的关键词“:”的部分：
[root@svr7 abc]# echo $A;
root:x:0:0:root:/root:/bin/bash
[root@svr7 abc]#  echo ${A%%:*}
root




[root@svr7 abc]# touch {a,b,c,d,e,f,g}.txt
[root@svr7 abc]# ls
a.txt  b.txt  c.txt  d.txt  e.txt  f.txt  g.txt
[root@svr7 abc]# vim for.sh 

[root@svr7 abc]# bash ./for.sh txt doc
[root@svr7 abc]# ls
a.doc  b.doc  c.doc  cut  d.doc  e.doc  f.doc  for.sh  g.doc
[root@svr7 abc]# cat for.sh
#!/bin/bash

for i in `ls ./*.$1`
do
 mv $i ${i%.$1}.$2
done



[root@svr7 abc]# vim add.sh
[root@svr7 abc]# sh add.sh
num=5050
num2=5050
[root@svr7 abc]# cat add.sh
#!/bin/bash
num='';num2='';
for i in `seq 1 100`;
do
 let num2+=i;
 num=$[$num+$i];
done
echo 'num='$num;
echo 'num2='$num2;

[root@svr7 abc]# sh add.sh
$num=5050	num2=5050
[root@svr7 abc]# cat add.sh
#!/bin/bash
num='';num2='';
for i in `seq 1 100`;
do
 let num2+=i;
 num=$[num+i];
done
echo -ne '$num='$num'\t'; echo 'num2='$num2;

[root@svr7 abc]# vim read.sh
[root@svr7 abc]# sh read.sh
Please input number:
$sum=55	$sum2=55
[root@svr7 abc]# cat read.sh
#!/bin/bash
read -p 'Please input number:' num
num=${num:-10};sum=0;sum2='';
for i in $(seq $num);
do
  let sum+=i;sum2=$[sum2+i];
done
echo -ne '$sum='$sum'\t';echo '$sum2='$sum2;


[root@svr7 abc]# x=(1 2 3 4);echo -ne ${x[0]}'\t';echo ${x[2]};
1	3

[root@svr7 abc]# x=(1 2 3 4);echo -ne ${x[0]}'\t';echo ${x[*]};
1	1 2 3 4

[root@svr7 abc]# x[4]=55;x[5]=66;echo ${x[*]};
1 2 3 4 55 66
[root@svr7 abc]# echo ${x[@]};
1 2 3 4 55 66
[root@svr7 abc]# 

[root@svr7 abc]# sh mail.sh 
[root@svr7 abc]# tail -13 /var/spool/mail/root
To: root@svr7.tedu.cn
Subject: errorMainObject
User-Agent: Heirloom mailx 12.5 7/5/10
From: root@svr7.tedu.cn (root)
xxx
yyy
zzz

[root@svr7 abc]# cat mail.sh 
#!/bin/bash
mail -s errorMainObject root << EOF  #end of file
xxx
yyy
zzz
EOF
[root@svr7 abc]# >/var/spool/mail/root
[root@svr7 abc]# tail -13 /var/spool/mail/root
[root@svr7 abc]#

[root@svr7 abc]# yum -y install expect
[root@svr7 abc]# rpm -q expect
expect-5.45-14.el7_1.x86_64


[root@pc207 ~]# rpm -q expect
expect-5.45-14.el7_1.x86_64

[root@pc207 shell]# ls 
continue.sh

[root@svr7 abc]# bash spawn.sh
spawn ssh 192.168.4.207
Last login: Tue Aug 14 17:00:57 2018 from 192.168.4.7
[root@pc207 ~]# touch /shell/abc.txt
[root@pc207 ~]# 

[root@svr7 abc]# cat spawn.sh 
#!/bin/bash
expect << EOF
spawn ssh 192.168.4.207
expect "password" {send "123\n"}
expect "#"        {send "touch /shell/abc.txt\n"}
expect "#"        {send "exit\r"}
EOF
[root@pc207 shell]# ls
abc.txt  continue.sh
===========================================
[root@desktop0 shell]# ./spawn.sh
spawn ssh -o StrictHostKeyChecking=no 172.25.0.11
root@172.25.0.11's password: 
Last login: Tue Aug 14 17:06:27 2018 from desktop0.example.com

[root@server0 ~]# touch /shell/abc.txt
[root@server0 ~]# [root@desktop0 shell]# 

[root@desktop0 shell]# cat spawn.sh 
#!/bin/bash
expect << EOF

spawn ssh -o StrictHostKeyChecking=no 172.25.0.11

expect "password" {send "redhat\n"}
expect "#"        {send "touch /shell/abc.txt\n"}
expect "#"        {send "exit\r"}
EOF
[root@server0 shell]# ls
abc.txt

[root@svr7 abc]# vim a.txt
[root@svr7 abc]# cat a.txt
a
ac
acq
a,tt
bac
[root@svr7 abc]# grep  .*  a.txt
grep: ..: 是一个目录
a.txt:a
a.txt:ac
a.txt:acq
a.txt:a,tt
a.txt:bac

==================================
https://github.com/redhatedu/course/blob/master/shell/if.pdf
==================================================

[root@pc207 shell]# var1=120;var2=$var1+20;echo $var2;
120+20
[root@pc207 shell]# echo $[var2+20];echo $var2;
160
120+20
使用grep -E 与 使用egrep命令完全等效，推荐使用后者，
   特别是涉及到复杂的正则表达式的时候。
[root@pc207 shell]# grep -E '^root|^bin' /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin

在grep检索式同时组合多个条件，比如输出以“root”或者以“bin”开头的行，
这时候（“或者| ”必须转义为“\|” )
[root@pc207 shell]# grep '^root\|^bin' /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin

使用grep -E或egrep命令，可支持扩展正则匹配模式，
 能够自动识别 |、{ 等正则表达式中的特殊字符，用起来更加方便
[root@pc207 shell]# egrep '^root|^bin' /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin

[root@pc207 shell]# egrep "\<halt\>" /etc/passwd
halt:x:7:0:halt:/sbin:/sbin/halt
[root@pc207 shell]# egrep '\<halt\>' /etc/passwd
halt:x:7:0:halt:/sbin:/sbin/halt
   
[root@pc207 shell]# egrep '\bhalt\b' /etc/passwd
halt:x:7:0:halt:/sbin:/sbin/halt
[root@pc207 shell]# egrep "\bhalt\b" /etc/passwd
halt:x:7:0:halt:/sbin:/sbin/halt























